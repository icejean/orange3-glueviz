1.orangecontrib.geo.widgets.plotutils.py
#Added by Jean 2020/05/30
from contextily.tile import _fetch_tile
# key of www.tianditu.gov.cn
TDKEY = "your tianditu.gov.cn key"

TILE_PROVIDERS = {
    # Added by Jean 2020/05/21
    "tianditu vector": _TileProvider(
        url="https://t6.tianditu.gov.cn/DataServer?T=vec_w&x={x}&y={y}&l={z}&tk=" + TDKEY,
        attribution='&copy; <a href="https://www.tianditu.gov.cn/">tianditu.gov.cn</a>',
        size=256,
        max_zoom=18
    ),
    "tianditu satellite": _TileProvider(
        url="https://t6.tianditu.gov.cn/DataServer?T=img_w&x={x}&y={y}&l={z}&tk=" + TDKEY,
        attribution='&copy; <a href="https://www.tianditu.gov.cn/">tianditu.gov.cn</a>',
        size=256,
        max_zoom=18
    ),     
    "tianditu terrain": _TileProvider(
        url="https://t6.tianditu.gov.cn/DataServer?T=ter_w&x={x}&y={y}&l={z}&tk=" + TDKEY,
        attribution='&copy; <a href="https://www.tianditu.gov.cn/">tianditu.gov.cn</a>',
        size=256,
        max_zoom=18
    ),       
    # Added by Jean 2020/04/25
    "Gaode StreetMap": _TileProvider(
        url="http://wprd01.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=7&x={x}&y={y}&z={z}",        
        attribution='&copy; <a href="http://map.amap.com/doc/serviceitem.html">高德地图</a>',
        size=256,
        max_zoom=18
    ), 
    "Gaode Satellite": _TileProvider(
        url="http://wprd01.is.autonavi.com/appmaptile?style=8&x={x}&y={y}&z={z}",        
        attribution='&copy; <a href="http://map.amap.com/doc/serviceitem.html">高德地图</a>',
        size=256,
        max_zoom=19
    ),    
    # Added by Jean 2020/05/08
    "ArcGIS": _TileProvider(
        url="https://map.geoq.cn/arcgis/rest/services/ChinaOnlineCommunityENG/MapServer/tile/{z}/{y}/{x}",        
        attribution='&copy; <a href="https://map.geoq.cn/arcgis/rest/services">ChinaOnlineCommunity</a>',
        size=256,
        max_zoom=18
    ),   
    # Added by Jean 2020/05/02
    "Basemaps light": _TileProvider(
        url="http://basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",
        attribution='&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, &copy; <a href="https://carto.com/attributions">CARTO</a>',
        size=256,
        max_zoom=19
    ),   
    ......
}


class ImageLoader(QObject):
......
    def get(self, tile):
        future = Future()
        url = QUrl(tile.url)
        request = QNetworkRequest(url)
        # Modified by Jean 2020/05/21 to support tianditu.gov.cn
        # request.setRawHeader(b"User-Agent", b"OWMap/1.0")
        # request.setRawHeader(b"User-Agent", b"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0")
        request.setRawHeader(b'User-Agent',b'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36')
        # Updated by Jean @ 2022/1/6
        request.setRawHeader(b'Accept',b'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8')
        request.setRawHeader(b'Accept-Encoding',b'gzip, deflate, br')
        request.setRawHeader(b'Accept-Language',b'zh-CN,zh;q=0.9')
        request.setRawHeader(b'sec-ch-ua',b'" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"')
        request.setRawHeader(b'sec-ch-ua-mobile',b'?0')
        request.setRawHeader(b'Upgrade-Insecure-Requests',b'1')

class MapMixin:
   def _load_one_from_net(self, t: _TileItem):
       def set_tile(_future):
       ......
            if _future.exception():
                _tile.n_loadings += 1
                # retry to download image
                self._load_one_from_net(_tile)
            else:
                img = _future.result()                
                # Added by Jean 2020/05/30 for support of tianditu.gov.cn
                # Download tianditu.gov.cn text marker for the same tile and merge it to the map tile
                if "tianditu" in _tile.url:
                    url = _tile.url
                    print(url)
                    getMarker = False
                    if "vec_w" in url:
                        url = url.replace("vec_w","cva_w") 
                        getMarker = True
                    elif "img_w" in url:
                        url = url.replace("img_w","cia_w")
                        getMarker = True
                    elif "ter_w" in url:
                        url = url.replace("ter_w","cta_w")
                        getMarker = True
                    if getMarker:
                        # Dowload the corresponding marker tile 
                        image = Image.fromarray( _fetch_tile(url, 0, 3), 'RGBA')
                        # Merge the marker tile to the corresponding map tile
                        r, g, b, alpha = image.split()
                        img = img.convert("RGBA")
                        img = Image.composite(image, img, alpha)
                        print(url)

2.orangecontrib.geo.widgets.owchoropleth.py
# Modified by Jean 2020/04/25
from Orange.widgets.settings import Setting, SettingProvider, rename_setting, \
    DomainContextHandler, ContextSetting, migrate_str_to_variable
from orangecontrib.geo.widgets.plotutils import MapMixin, MapViewBox, \
    _TileProvider, TILE_PROVIDERS, DEFAULT_TILE_PROVIDER, deg2norm

# modified by Jean 2020/06/16 to reference other color palettes
from Orange.widgets.utils.colorpalettes import BinnedContinuousPalette, \
    DefaultContinuousPalette, LimitedDiscretePalette, ContinuousPalettes, DiscretePalettes


class OWChoroplethPlotMapGraph(MapMixin, OWChoroplethPlotGraph):
    """
    This just adds maps as background.
    """
    # Added by Jean 2020/04/25 for support of selecting Tile provider        
    tile_provider_key = settings.Setting(DEFAULT_TILE_PROVIDER)

    def __init__(self, widget, parent):
        OWChoroplethPlotGraph.__init__(self, widget, parent)
        MapMixin.__init__(self)
        # Modiffied by Jean 2020/04/25 for support of selecting Tile provider                
        # self._update_tile_provider(CHOROPLETH_TILE_PROVIDER)
        self._update_tile_provider(TILE_PROVIDERS[DEFAULT_TILE_PROVIDER])

    # Added by Jean 2020/04/25 for support of selecting Tile provider        
    def update_tile_provider(self):
        super()._update_tile_provider(TILE_PROVIDERS[self.tile_provider_key])


class OWChoropleth(OWWidget):
......
    class Outputs:
        selected_data = Output("Selected Data", Table, default=True)
        annotated_data = Output(ANNOTATED_DATA_SIGNAL_NAME, Table)

        # Added by Jean 2020/06/20, output agg data for future useage
        agg_data = Output("Aggregated data", Table)

    # Added by Jean 2020/06/16
    palette_key = Setting(next(iter(ContinuousPalettes)))

    def _add_controls(self):
    ......
        # Added by Jean 2020/04/25 for support of selecting Tile provider        
        gui.comboBox(lat_lon_box, self, 'graph.tile_provider_key', label='Map:',
                     items=list(TILE_PROVIDERS.keys()),
                     callback=self.graph.update_tile_provider, **options)


        # Modified by Jean 2020/05/13, set max to 4
        a_slider = gui.hSlider(agg_box, self, 'admin_level', minValue=0,
                               maxValue=4, step=1, label='Detail:',
                               createLabel=False, callback=self.setup_plot)

        # Added by Jean 2020/06/16 for support of selecting color palette   
        av_slider.setFixedWidth(176)
        gui.comboBox(visualization_box, self, 'palette_key', label='Palette:',
                     items=list(ContinuousPalettes.keys()),
                     callback=self.update_palette, **options)


    # Added by Jean 2020/06/16 for support of selecting color palette
    def update_palette(self):
        self.agg_attr.palette = ContinuousPalettes[self.palette_key]
        self.graph.update_colors()
......
    def send_data(self):
......
        # Added by Jean 2020/06/20, output aggdata for future usage
        agg_data = self.agg_data   # type: Optional[np.ndarray]
        region_ids = self.region_ids   # type: Optional[np.ndarray]
        if agg_data is not None:
            agg_data = agg_data.reshape(agg_data.shape[0], 1)
            region_ids = region_ids.reshape(region_ids.shape[0], 1)
            agg_data = Table.from_numpy(None,agg_data,None,region_ids)
        self.Outputs.agg_data.send(agg_data)

......
    def get_agg_data(self) -> np.ndarray:
......
        # Added by Jean 2020/06/20, output aggregated data
        self.send_data()

        return self.agg_data




3.D:\Anaconda3\Lib\site-packages\orangecontrib\geo\mapper.py
if is_shapely_speedups_available():
    # shapely.speedups.enable()
    # log.debug('Shapely speed-ups available')
    # Modified by Jean 2020/06/01, 
    # forced loading shapes every time, encase of null pointer exception in init()
    shapely.speedups.disable()    
    log.debug('Shapely speed-ups disabled')    

def init():
......
    # Modified by Jean 2020/05/13, add level 4
    nearest_points = {0: [], 1: [], 2: [], 3: [], 4: []}
    shapes = {0: [], 1: [], 2: [], 3: [], 4: []}
......
            # Added by Jean 2020/05/13
            # Make Admin1 shapes available in Admin3 too. Except for CHN
            # which is the country we have explicit Admin3 shapes for
            if admin == 1 and cc !='CHN':
                shapes[3].extend(tups)
                nearest_points[3].extend(points)
                shapes[4].extend(tups)
                nearest_points[4].extend(points)
......
        for feature in collection['features']:
            p = feature['properties']
            # Modified by Jean 2020/06/01 to catch Null pointer exception
            try:
                shape = Shape(feature['geometry'])
            except ValueError:
                print(p)
                continue
            tup = (shape, p)
......            


def latlon2region(latlon, admin=0):
......
    # Modified by Jean 2020/05/13
    assert 0 <= admin <= 4

4.D:\Anaconda3\Lib\site-packages\contextily\tile.py
# Modified by Jean 2020/05/26
#USER_AGENT = "contextily-" + uuid.uuid4().hex
USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36'

def _retryer(tile_url, wait, max_retries):
    """
    Retry a url many times in attempt to get a tile

    Arguments
    ---------
    tile_url : str
        string that is the target of the web request. Should be
        a properly-formatted url for a tile provider.
    wait : int
        if the tile API is rate-limited, the number of seconds to wait
        between a failed request and the next try
    max_retries : int
        total number of rejected requests allowed before contextily
        will stop trying to fetch more tiles from a rate-limited API.

    Returns
    -------
    request object containing the web response.
    """
    headers={
        'User-Agent':USER_AGENT,
        # Modified by Jean @ 2022/01/06
        'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'zh-CN,zh;q=0.9',
        'sec-ch-ua': '" Not;A Brand";v="99", "Google Chrome";v="91", "Chromium";v="91"',
        'sec-ch-ua-mobile': '?0',
        'Upgrade-Insecure-Requests': '1'
        }    
    try:
        # Modified by Jean at 2021/06/25 for TianDiTu
        #request = requests.get(tile_url, headers={"user-agent": USER_AGENT})
        request = requests.get(tile_url, headers=headers)        
        request.raise_for_status()
    except requests.HTTPError:
        if request.status_code == 404:
            raise requests.HTTPError(
                "Tile URL resulted in a 404 error. "
                "Double-check your tile url:\n{}".format(tile_url)
            )
        elif request.status_code == 104:
            if max_retries > 0:
                os.wait(wait)
                max_retries -= 1
                request = _retryer(tile_url, wait, max_retries)
            else:
                raise requests.HTTPError("Connection reset by peer too many times.")
    return request

def _fetch_tile(tile_url, wait, max_retries):
    request = _retryer(tile_url, wait, max_retries)
    with io.BytesIO(request.content) as image_stream:
        # Modified by Jean 2020/05/29, convert to PNG with alpha channel for tianditu.gov.cn
        # image = Image.open(image_stream).convert("RGB")        
        image = Image.open(image_stream).convert("RGBA")
        array = np.asarray(image)
        image.close()
    return array

5.Orange.widgets.utils.colorpalette.py
......
# pylint: disable=line-too-long
ContinuousPalettes = {
......
    # Added by Jean 2020/06/17, add two reds palette for China    
    'linear_matplotlib_reds': ContinuousPalette(
        'Matplotlib reds', 'Matplotlib_reds',
        [[255, 246, 241], [255, 245, 240], [255, 245, 239], [255, 244, 238], [255, 243, 237], [255, 243, 236], [255, 242, 235], [255, 241, 234], [255, 241, 233], [255, 240, 232], [255, 239, 231], [255, 239, 231], [255, 238, 230], [255, 237, 229], [255, 237, 228], [255, 236, 227], [255, 235, 226], [255, 235, 225], [255, 234, 224], [255, 233, 223], [255, 233, 222], [255, 232, 221], [255, 231, 220], [255, 231, 219], [255, 230, 218], [255, 229, 217], [255, 229, 216], [255, 228, 215], [255, 227, 214], [255, 227, 214], [255, 226, 213], [255, 225, 212], [255, 225, 211], [255, 224, 209], [255, 222, 208], [255, 221, 206], [255, 220, 204], [255, 219, 203], [255, 218, 201], [255, 217, 200], [254, 215, 198], [254, 214, 197], [254, 213, 195], [254, 212, 194], [254, 211, 192], [254, 210, 191], [254, 208, 189], [254, 207, 187], [254, 206, 186], [254, 205, 184], [254, 204, 183], [254, 203, 181], [254, 201, 180], [254, 200, 178], [254, 199, 177], [254, 198, 175], [253, 197, 174], [253, 196, 172], [253, 194, 171], [253, 193, 169], [253, 192, 167], [253, 191, 166], [253, 190, 164], [253, 189, 163], [253, 187, 161], [253, 186, 160], [253, 185, 158], [253, 184, 157], [253, 182, 155], [253, 181, 154], [253, 180, 152], [253, 178, 151], [253, 177, 149], [253, 176, 148], [253, 174, 146], [253, 173, 145], [253, 172, 143], [253, 171, 142], [253, 169, 141], [253, 168, 139], [253, 167, 138], [253, 165, 136], [253, 164, 135], [253, 163, 133], [253, 162, 132], [253, 160, 130], [253, 159, 129], [253, 158, 127], [253, 156, 126], [253, 155, 124], [253, 154, 123], [253, 153, 121], [253, 151, 120], [253, 150, 118], [253, 149, 117], [253, 147, 115], [253, 146, 114], [253, 145, 113], [253, 144, 111], [253, 142, 110], [253, 141, 109], [253, 140, 108], [253, 139, 106], [253, 137, 105], [253, 136, 104], [253, 135, 103], [253, 134, 101], [253, 132, 100], [253, 131, 99], [253, 130, 98], [253, 128, 96], [253, 127, 95], [252, 126, 94], [252, 125, 93], [252, 123, 91], [252, 122, 90], [252, 121, 89], [252, 120, 88], [252, 118, 86], [252, 117, 85], [252, 116, 84], [252, 115, 82], [252, 113, 81], [252, 112, 80], [252, 111, 79], [252, 110, 77], [252, 108, 76], [252, 107, 75], [252, 106, 74], [251, 104, 73], [251, 103, 72], [251, 101, 71], [250, 100, 70], [250, 98, 69], [250, 97, 68], [249, 95, 67], [249, 94, 66], [248, 92, 65], [248, 91, 64], [248, 89, 63], [247, 88, 62], [247, 86, 62], [247, 85, 61], [246, 83, 60], [246, 82, 59], [245, 81, 58], [245, 79, 57], [245, 78, 56], [244, 76, 55], [244, 75, 54], [243, 73, 53], [243, 72, 52], [243, 70, 51], [242, 69, 50], [242, 67, 49], [242, 66, 48], [241, 64, 47], [241, 63, 46], [240, 61, 45], [240, 60, 45], [239, 59, 44], [238, 57, 43], [237, 56, 43], [236, 55, 42], [235, 54, 42], [234, 53, 42], [232, 52, 41], [231, 51, 41], [230, 50, 40], [229, 49, 40], [228, 48, 39], [227, 46, 39], [226, 45, 38], [224, 44, 38], [223, 43, 37], [222, 42, 37], [221, 41, 36], [220, 40, 36], [219, 39, 35], [218, 38, 35], [217, 36, 34], [215, 35, 34], [214, 34, 33], [213, 33, 33], [212, 32, 33], [211, 31, 32], [210, 30, 32], [209, 29, 31], [207, 28, 31], [206, 27, 30], [205, 25, 30], [204, 24, 29], [203, 24, 29], [202, 24, 29], [201, 23, 28], [199, 23, 28], [198, 23, 28], [197, 22, 28], [196, 22, 27], [195, 22, 27], [193, 22, 27], [192, 21, 27], [191, 21, 26], [190, 21, 26], [189, 20, 26], [187, 20, 26], [186, 20, 25], [185, 20, 25], [184, 19, 25], [183, 19, 25], [181, 19, 24], [180, 18, 24], [179, 18, 24], [178, 18, 24], [177, 18, 23], [175, 17, 23], [174, 17, 23], [173, 17, 23], [172, 17, 22], [171, 16, 22], [169, 16, 22], [168, 16, 22], [167, 15, 21], [166, 15, 21], [164, 15, 21], [162, 14, 21], [160, 14, 20], [158, 13, 20], [156, 13, 20], [154, 12, 20], [152, 12, 19], [150, 11, 19], [148, 11, 19], [146, 10, 19], [144, 10, 18], [142, 9, 18], [141, 9, 18], [139, 9, 18], [137, 8, 17], [135, 8, 17], [133, 7, 17], [131, 7, 17], [129, 6, 16], [127, 6, 16], [125, 5, 16], [123, 5, 16], [121, 4, 15], [119, 4, 15], [117, 3, 15], [115, 3, 15], [113, 2, 14], [111, 2, 14], [109, 1, 14], [107, 1, 14], [105, 0, 13], [103, 0, 13]],
    ),
    'linear_reds': ContinuousPalette(
        'Dim red', 'linear_reds',
        [[255, 254, 254], [255, 252, 252], [255, 250, 250], [255, 248, 248], [255, 246, 246], [255, 244, 244], [255, 242, 242], [255, 240, 240], [255, 238, 238], [255, 236, 236], [255, 234, 234], [255, 232, 232], [255, 230, 230], [255, 228, 228], [255, 226, 226], [255, 224, 224], [255, 222, 222], [255, 220, 220], [255, 218, 218], [255, 216, 216], [255, 214, 214], [255, 212, 212], [255, 210, 210], [255, 208, 208], [255, 206, 206], [255, 204, 204], [255, 202, 202], [255, 200, 200], [255, 198, 198], [255, 196, 196], [255, 194, 194], [255, 192, 192], [255, 190, 190], [255, 188, 188], [255, 186, 186], [255, 184, 184], [255, 182, 182], [255, 180, 180], [255, 178, 178], [255, 176, 176], [255, 174, 174], [255, 172, 172], [255, 170, 170], [255, 168, 168], [255, 166, 166], [255, 164, 164], [255, 162, 162], [255, 160, 160], [255, 158, 158], [255, 156, 156], [255, 154, 154], [255, 152, 152], [255, 150, 150], [255, 148, 148], [255, 146, 146], [255, 144, 144], [255, 142, 142], [255, 140, 140], [255, 138, 138], [255, 136, 136], [255, 134, 134], [255, 132, 132], [255, 130, 130], [255, 128, 128], [255, 126, 126], [255, 124, 124], [255, 122, 122], [255, 120, 120], [255, 118, 118], [255, 116, 116], [255, 114, 114], [255, 112, 112], [255, 110, 110], [255, 108, 108], [255, 106, 106], [255, 104, 104], [255, 102, 102], [255, 100, 100], [255, 98, 98], [255, 96, 96], [255, 94, 94], [255, 92, 92], [255, 90, 90], [255, 88, 88], [255, 86, 86], [255, 84, 84], [255, 82, 82], [255, 80, 80], [255, 78, 78], [255, 76, 76], [255, 74, 74], [255, 72, 72], [255, 70, 70], [255, 68, 68], [255, 66, 66], [255, 64, 64], [255, 62, 62], [255, 60, 60], [255, 58, 58], [255, 56, 56], [255, 54, 54], [255, 52, 52], [255, 50, 50], [255, 48, 48], [255, 46, 46], [255, 44, 44], [255, 42, 42], [255, 40, 40], [255, 38, 38], [255, 36, 36], [255, 34, 34], [255, 32, 32], [255, 30, 30], [255, 28, 28], [255, 26, 26], [255, 24, 24], [255, 22, 22], [255, 20, 20], [255, 18, 18], [255, 16, 16], [255, 14, 14], [255, 12, 12], [255, 10, 10], [255, 8, 8], [255, 6, 6], [255, 4, 4], [255, 2, 2], [255, 0, 0], [254, 0, 0], [253, 0, 0], [252, 0, 0], [251, 0, 0], [250, 0, 0], [249, 0, 0], [248, 0, 0], [247, 0, 0], [246, 0, 0], [245, 0, 0], [244, 0, 0], [243, 0, 0], [242, 0, 0], [241, 0, 0], [240, 0, 0], [239, 0, 0], [238, 0, 0], [237, 0, 0], [236, 0, 0], [235, 0, 0], [234, 0, 0], [233, 0, 0], [232, 0, 0], [231, 0, 0], [230, 0, 0], [229, 0, 0], [228, 0, 0], [227, 0, 0], [226, 0, 0], [225, 0, 0], [224, 0, 0], [223, 0, 0], [222, 0, 0], [221, 0, 0], [220, 0, 0], [219, 0, 0], [218, 0, 0], [217, 0, 0], [216, 0, 0], [215, 0, 0], [214, 0, 0], [213, 0, 0], [212, 0, 0], [211, 0, 0], [210, 0, 0], [209, 0, 0], [208, 0, 0], [207, 0, 0], [206, 0, 0], [205, 0, 0], [204, 0, 0], [203, 0, 0], [202, 0, 0], [201, 0, 0], [200, 0, 0], [199, 0, 0], [198, 0, 0], [197, 0, 0], [196, 0, 0], [195, 0, 0], [194, 0, 0], [193, 0, 0], [192, 0, 0], [191, 0, 0], [190, 0, 0], [189, 0, 0], [188, 0, 0], [187, 0, 0], [186, 0, 0], [185, 0, 0], [184, 0, 0], [183, 0, 0], [182, 0, 0], [181, 0, 0], [180, 0, 0], [179, 0, 0], [178, 0, 0], [177, 0, 0], [176, 0, 0], [175, 0, 0], [174, 0, 0], [173, 0, 0], [172, 0, 0], [171, 0, 0], [170, 0, 0], [169, 0, 0], [168, 0, 0], [167, 0, 0], [166, 0, 0], [165, 0, 0], [164, 0, 0], [163, 0, 0], [162, 0, 0], [161, 0, 0], [160, 0, 0], [159, 0, 0], [158, 0, 0], [157, 0, 0], [156, 0, 0], [155, 0, 0], [154, 0, 0], [153, 0, 0], [152, 0, 0], [151, 0, 0], [150, 0, 0], [149, 0, 0], [148, 0, 0], [147, 0, 0], [146, 0, 0], [145, 0, 0], [144, 0, 0], [143, 0, 0], [142, 0, 0], [141, 0, 0], [140, 0, 0], [139, 0, 0], [138, 0, 0], [137, 0, 0], [136, 0, 0], [135, 0, 0], [134, 0, 0], [133, 0, 0], [132, 0, 0], [131, 0, 0], [130, 0, 0], [129, 0, 0], [128, 0, 0], [128, 0, 0]],
    ),   
    'linear_matplotlib_greens': ContinuousPalette(
        'Matplotlib greens', 'Matplotlib_greens',
        [[248, 253, 246], [247, 253, 245], [247, 253, 245], [246, 252, 244], [246, 252, 243], [245, 252, 243], [245, 252, 242], [244, 251, 241], [243, 251, 241], [243, 251, 240], [242, 251, 239], [242, 251, 239], [241, 250, 238], [241, 250, 237], [240, 250, 237], [239, 250, 236], [239, 249, 235], [238, 249, 235], [238, 249, 234], [237, 249, 233], [237, 249, 233], [236, 248, 232], [235, 248, 231], [235, 248, 231], [234, 248, 230], [234, 247, 229], [233, 247, 229], [233, 247, 228], [232, 247, 227], [232, 247, 227], [231, 246, 226], [230, 246, 225], [230, 246, 225], [229, 246, 224], [228, 245, 223], [227, 245, 222], [226, 244, 221], [225, 244, 220], [224, 244, 219], [223, 243, 218], [222, 243, 217], [221, 243, 216], [220, 242, 215], [219, 242, 214], [218, 241, 213], [217, 241, 212], [217, 241, 211], [216, 240, 210], [215, 240, 209], [214, 239, 208], [213, 239, 207], [212, 239, 206], [211, 238, 205], [210, 238, 204], [209, 238, 203], [208, 237, 202], [207, 237, 201], [206, 236, 200], [205, 236, 199], [204, 236, 198], [203, 235, 197], [202, 235, 196], [201, 235, 195], [200, 234, 194], [199, 234, 192], [198, 233, 191], [197, 233, 190], [196, 232, 189], [195, 232, 188], [193, 231, 187], [192, 231, 185], [191, 230, 184], [190, 230, 183], [189, 229, 182], [188, 229, 181], [186, 228, 180], [185, 228, 178], [184, 227, 177], [183, 227, 176], [182, 226, 175], [180, 226, 174], [179, 225, 173], [178, 225, 171], [177, 224, 170], [176, 224, 169], [174, 223, 168], [173, 223, 167], [172, 222, 166], [171, 222, 164], [170, 221, 163], [168, 221, 162], [167, 220, 161], [166, 220, 160], [165, 219, 159], [164, 219, 158], [162, 218, 156], [161, 218, 155], [160, 217, 154], [158, 216, 153], [157, 216, 152], [155, 215, 151], [154, 214, 149], [153, 214, 148], [151, 213, 147], [150, 212, 146], [148, 212, 145], [147, 211, 144], [146, 210, 142], [144, 210, 141], [143, 209, 140], [141, 208, 139], [140, 208, 138], [138, 207, 137], [137, 206, 135], [136, 206, 134], [134, 205, 133], [133, 204, 132], [131, 204, 131], [130, 203, 130], [129, 202, 128], [127, 202, 127], [126, 201, 126], [124, 200, 125], [123, 200, 124], [121, 199, 123], [120, 198, 121], [119, 198, 120], [117, 197, 119], [116, 196, 118], [114, 196, 117], [112, 195, 116], [111, 194, 116], [109, 193, 115], [108, 192, 114], [106, 192, 113], [104, 191, 113], [103, 190, 112], [101, 189, 111], [100, 189, 110], [98, 188, 109], [96, 187, 109], [95, 186, 108], [93, 185, 107], [92, 185, 106], [90, 184, 105], [88, 183, 105], [87, 182, 104], [85, 181, 103], [84, 181, 102], [82, 180, 102], [80, 179, 101], [79, 178, 100], [77, 177, 99], [75, 177, 98], [74, 176, 98], [72, 175, 97], [71, 174, 96], [69, 174, 95], [67, 173, 94], [66, 172, 94], [65, 171, 93], [64, 170, 92], [63, 169, 91], [62, 168, 91], [61, 167, 90], [60, 166, 89], [59, 165, 88], [58, 164, 88], [57, 163, 87], [56, 162, 86], [55, 161, 85], [54, 160, 85], [53, 159, 84], [52, 158, 83], [51, 157, 82], [50, 156, 82], [50, 155, 81], [49, 154, 80], [48, 153, 79], [47, 152, 79], [46, 151, 78], [45, 150, 77], [44, 149, 76], [43, 148, 76], [42, 147, 75], [41, 146, 74], [40, 145, 73], [39, 144, 72], [38, 143, 72], [37, 142, 71], [36, 141, 70], [35, 140, 69], [34, 139, 69], [33, 138, 68], [32, 137, 67], [31, 136, 66], [30, 135, 66], [29, 134, 65], [28, 133, 64], [27, 132, 63], [25, 131, 62], [24, 130, 62], [23, 129, 61], [22, 128, 60], [21, 127, 59], [20, 127, 58], [19, 126, 58], [18, 125, 57], [17, 124, 56], [16, 123, 55], [14, 122, 55], [13, 121, 54], [12, 120, 53], [11, 119, 52], [10, 118, 51], [9, 117, 51], [8, 116, 50], [7, 115, 49], [6, 114, 48], [5, 113, 47], [3, 112, 47], [2, 111, 46], [1, 110, 45], [0, 110, 44], [0, 108, 44], [0, 107, 43], [0, 106, 43], [0, 104, 42], [0, 103, 42], [0, 102, 41], [0, 101, 40], [0, 99, 40], [0, 98, 39], [0, 97, 39], [0, 95, 38], [0, 94, 38], [0, 93, 37], [0, 92, 37], [0, 90, 36], [0, 89, 36], [0, 88, 35], [0, 86, 35], [0, 85, 34], [0, 84, 34], [0, 82, 33], [0, 81, 32], [0, 80, 32], [0, 79, 31], [0, 77, 31], [0, 76, 30], [0, 75, 30], [0, 73, 29], [0, 72, 29], [0, 71, 28], [0, 70, 28], [0, 68, 27]],
    ),
    'linear_greens': ContinuousPalette(
        'Dim green', 'linear_greens',
        [[254, 255, 254], [252, 255, 252], [250, 255, 250], [248, 255, 248], [246, 255, 246], [244, 255, 244], [242, 255, 242], [240, 255, 240], [238, 255, 238], [236, 255, 236], [234, 255, 234], [232, 255, 232], [230, 255, 230], [228, 255, 228], [226, 255, 226], [224, 255, 224], [222, 255, 222], [220, 255, 220], [218, 255, 218], [216, 255, 216], [214, 255, 214], [212, 255, 212], [210, 255, 210], [208, 255, 208], [206, 255, 206], [204, 255, 204], [202, 255, 202], [200, 255, 200], [198, 255, 198], [196, 255, 196], [194, 255, 194], [192, 255, 192], [190, 255, 190], [188, 255, 188], [186, 255, 186], [184, 255, 184], [182, 255, 182], [180, 255, 180], [178, 255, 178], [176, 255, 176], [174, 255, 174], [172, 255, 172], [170, 255, 170], [168, 255, 168], [166, 255, 166], [164, 255, 164], [162, 255, 162], [160, 255, 160], [158, 255, 158], [156, 255, 156], [154, 255, 154], [152, 255, 152], [150, 255, 150], [148, 255, 148], [146, 255, 146], [144, 255, 144], [142, 255, 142], [140, 255, 140], [138, 255, 138], [136, 255, 136], [134, 255, 134], [132, 255, 132], [130, 255, 130], [128, 255, 128], [126, 255, 126], [124, 255, 124], [122, 255, 122], [120, 255, 120], [118, 255, 118], [116, 255, 116], [114, 255, 114], [112, 255, 112], [110, 255, 110], [108, 255, 108], [106, 255, 106], [104, 255, 104], [102, 255, 102], [100, 255, 100], [98, 255, 98], [96, 255, 96], [94, 255, 94], [92, 255, 92], [90, 255, 90], [88, 255, 88], [86, 255, 86], [84, 255, 84], [82, 255, 82], [80, 255, 80], [78, 255, 78], [76, 255, 76], [74, 255, 74], [72, 255, 72], [70, 255, 70], [68, 255, 68], [66, 255, 66], [64, 255, 64], [62, 255, 62], [60, 255, 60], [58, 255, 58], [56, 255, 56], [54, 255, 54], [52, 255, 52], [50, 255, 50], [48, 255, 48], [46, 255, 46], [44, 255, 44], [42, 255, 42], [40, 255, 40], [38, 255, 38], [36, 255, 36], [34, 255, 34], [32, 255, 32], [30, 255, 30], [28, 255, 28], [26, 255, 26], [24, 255, 24], [22, 255, 22], [20, 255, 20], [18, 255, 18], [16, 255, 16], [14, 255, 14], [12, 255, 12], [10, 255, 10], [8, 255, 8], [6, 255, 6], [4, 255, 4], [2, 255, 2], [0, 255, 0], [0, 254, 0], [0, 253, 0], [0, 252, 0], [0, 251, 0], [0, 250, 0], [0, 249, 0], [0, 248, 0], [0, 247, 0], [0, 246, 0], [0, 245, 0], [0, 244, 0], [0, 243, 0], [0, 242, 0], [0, 241, 0], [0, 240, 0], [0, 239, 0], [0, 238, 0], [0, 237, 0], [0, 236, 0], [0, 235, 0], [0, 234, 0], [0, 233, 0], [0, 232, 0], [0, 231, 0], [0, 230, 0], [0, 229, 0], [0, 228, 0], [0, 227, 0], [0, 226, 0], [0, 225, 0], [0, 224, 0], [0, 223, 0], [0, 222, 0], [0, 221, 0], [0, 220, 0], [0, 219, 0], [0, 218, 0], [0, 217, 0], [0, 216, 0], [0, 215, 0], [0, 214, 0], [0, 213, 0], [0, 212, 0], [0, 211, 0], [0, 210, 0], [0, 209, 0], [0, 208, 0], [0, 207, 0], [0, 206, 0], [0, 205, 0], [0, 204, 0], [0, 203, 0], [0, 202, 0], [0, 201, 0], [0, 200, 0], [0, 199, 0], [0, 198, 0], [0, 197, 0], [0, 196, 0], [0, 195, 0], [0, 194, 0], [0, 193, 0], [0, 192, 0], [0, 191, 0], [0, 190, 0], [0, 189, 0], [0, 188, 0], [0, 187, 0], [0, 186, 0], [0, 185, 0], [0, 184, 0], [0, 183, 0], [0, 182, 0], [0, 181, 0], [0, 180, 0], [0, 179, 0], [0, 178, 0], [0, 177, 0], [0, 176, 0], [0, 175, 0], [0, 174, 0], [0, 173, 0], [0, 172, 0], [0, 171, 0], [0, 170, 0], [0, 169, 0], [0, 168, 0], [0, 167, 0], [0, 166, 0], [0, 165, 0], [0, 164, 0], [0, 163, 0], [0, 162, 0], [0, 161, 0], [0, 160, 0], [0, 159, 0], [0, 158, 0], [0, 157, 0], [0, 156, 0], [0, 155, 0], [0, 154, 0], [0, 153, 0], [0, 152, 0], [0, 151, 0], [0, 150, 0], [0, 149, 0], [0, 148, 0], [0, 147, 0], [0, 146, 0], [0, 145, 0], [0, 144, 0], [0, 143, 0], [0, 142, 0], [0, 141, 0], [0, 140, 0], [0, 139, 0], [0, 138, 0], [0, 137, 0], [0, 136, 0], [0, 135, 0], [0, 134, 0], [0, 133, 0], [0, 132, 0], [0, 131, 0], [0, 130, 0], [0, 129, 0], [0, 128, 0], [0, 128, 0]],
    ), 
    'linear_matplotlib_blues': ContinuousPalette(
        'Matplotlib blues', 'Matplotlib_blues',
        [[248, 252, 0], [247, 251, 0], [246, 251, 255], [246, 250, 255], [245, 250, 255], [244, 249, 255], [243, 249, 254], [242, 248, 254], [242, 248, 254], [241, 247, 254], [240, 247, 253], [239, 246, 253], [239, 246, 253], [238, 245, 253], [237, 245, 252], [236, 244, 252], [235, 244, 252], [235, 243, 252], [234, 243, 251], [233, 242, 251], [232, 242, 251], [231, 241, 251], [231, 241, 250], [230, 240, 250], [229, 240, 250], [228, 239, 250], [227, 239, 249], [227, 238, 249], [226, 238, 249], [225, 237, 249], [224, 237, 248], [224, 236, 248], [223, 236, 248], [222, 235, 248], [221, 235, 247], [221, 234, 247], [220, 234, 247], [219, 233, 247], [218, 233, 246], [217, 232, 246], [217, 232, 246], [216, 231, 246], [215, 231, 245], [214, 230, 245], [214, 230, 245], [213, 229, 245], [212, 229, 244], [211, 228, 244], [211, 228, 244], [210, 227, 244], [209, 227, 243], [208, 226, 243], [208, 226, 243], [207, 225, 243], [206, 225, 242], [205, 224, 242], [205, 224, 242], [204, 223, 242], [203, 223, 241], [202, 222, 241], [202, 222, 241], [201, 221, 241], [200, 221, 240], [199, 220, 240], [198, 220, 240], [197, 219, 239], [196, 219, 239], [195, 218, 239], [193, 218, 238], [192, 217, 238], [191, 217, 237], [190, 216, 237], [188, 215, 236], [187, 215, 236], [186, 214, 235], [185, 214, 235], [183, 213, 235], [182, 213, 234], [181, 212, 234], [180, 212, 233], [178, 211, 233], [177, 211, 232], [176, 210, 232], [175, 210, 231], [173, 209, 231], [172, 208, 231], [171, 208, 230], [169, 207, 230], [168, 207, 229], [167, 206, 229], [166, 206, 228], [164, 205, 228], [163, 205, 227], [162, 204, 227], [161, 204, 227], [159, 203, 226], [158, 202, 226], [156, 202, 225], [155, 201, 225], [153, 200, 225], [152, 199, 224], [150, 198, 224], [148, 197, 224], [147, 196, 223], [145, 195, 223], [144, 195, 223], [142, 194, 222], [140, 193, 222], [139, 192, 222], [137, 191, 221], [136, 190, 221], [134, 189, 221], [132, 188, 220], [131, 187, 220], [129, 187, 220], [127, 186, 219], [126, 185, 219], [124, 184, 218], [123, 183, 218], [121, 182, 218], [119, 181, 217], [118, 180, 217], [116, 180, 217], [115, 179, 216], [113, 178, 216], [111, 177, 216], [110, 176, 215], [108, 175, 215], [107, 174, 215], [105, 173, 214], [104, 172, 214], [103, 172, 213], [102, 171, 213], [100, 170, 212], [99, 169, 212], [98, 168, 211], [96, 167, 211], [95, 166, 210], [94, 165, 210], [93, 165, 209], [91, 164, 209], [90, 163, 208], [89, 162, 208], [87, 161, 207], [86, 160, 207], [85, 159, 206], [84, 158, 206], [82, 157, 205], [81, 157, 205], [80, 156, 204], [78, 155, 204], [77, 154, 203], [76, 153, 202], [74, 152, 202], [73, 151, 201], [72, 150, 201], [71, 150, 200], [69, 149, 200], [68, 148, 199], [67, 147, 199], [66, 146, 198], [65, 145, 198], [64, 144, 197], [62, 143, 197], [61, 142, 196], [60, 141, 196], [59, 140, 195], [58, 139, 195], [57, 138, 194], [56, 137, 194], [55, 136, 193], [54, 134, 193], [53, 133, 192], [52, 132, 191], [51, 131, 191], [50, 130, 190], [49, 129, 190], [48, 128, 189], [47, 127, 189], [46, 126, 188], [45, 125, 188], [44, 124, 187], [43, 123, 187], [42, 122, 186], [41, 121, 186], [40, 120, 185], [39, 119, 185], [38, 118, 184], [37, 117, 183], [35, 116, 183], [34, 115, 182], [33, 114, 182], [33, 113, 181], [32, 112, 180], [31, 111, 180], [30, 110, 179], [29, 109, 178], [29, 108, 177], [28, 107, 176], [27, 106, 176], [26, 105, 175], [25, 104, 174], [25, 103, 173], [24, 102, 172], [23, 101, 172], [22, 100, 171], [22, 99, 170], [21, 98, 169], [20, 97, 169], [19, 96, 168], [18, 95, 167], [18, 94, 166], [17, 93, 165], [16, 92, 165], [15, 91, 164], [14, 90, 163], [14, 88, 162], [13, 87, 161], [12, 86, 161], [11, 85, 160], [10, 84, 159], [10, 83, 158], [9, 82, 157], [8, 81, 157], [8, 80, 155], [8, 79, 154], [8, 78, 152], [8, 77, 151], [8, 76, 149], [8, 75, 148], [8, 74, 146], [8, 73, 144], [8, 72, 143], [8, 71, 141], [8, 70, 140], [8, 69, 138], [8, 68, 137], [8, 67, 135], [8, 66, 134], [8, 65, 132], [8, 64, 131], [8, 63, 129], [8, 62, 127], [8, 61, 126], [8, 60, 124], [8, 59, 123], [8, 58, 121], [8, 57, 120], [8, 55, 118], [8, 54, 117], [8, 53, 115], [8, 52, 114], [8, 51, 112], [8, 50, 111], [8, 49, 109], [8, 48, 107]],
    ),
    'linear_blues': ContinuousPalette(
        'Dim blue', 'linear_blues',
        [[254, 254, 255], [252, 252, 255], [250, 250, 255], [248, 248, 255], [246, 246, 255], [244, 244, 255], [242, 242, 255], [240, 240, 255], [238, 238, 255], [236, 236, 255], [234, 234, 255], [232, 232, 255], [230, 230, 255], [228, 228, 255], [226, 226, 255], [224, 224, 255], [222, 222, 255], [220, 220, 255], [218, 218, 255], [216, 216, 255], [214, 214, 255], [212, 212, 255], [210, 210, 255], [208, 208, 255], [206, 206, 255], [204, 204, 255], [202, 202, 255], [200, 200, 255], [198, 198, 255], [196, 196, 255], [194, 194, 255], [192, 192, 255], [190, 190, 255], [188, 188, 255], [186, 186, 255], [184, 184, 255], [182, 182, 255], [180, 180, 255], [178, 178, 255], [176, 176, 255], [174, 174, 255], [172, 172, 255], [170, 170, 255], [168, 168, 255], [166, 166, 255], [164, 164, 255], [162, 162, 255], [160, 160, 255], [158, 158, 255], [156, 156, 255], [154, 154, 255], [152, 152, 255], [150, 150, 255], [148, 148, 255], [146, 146, 255], [144, 144, 255], [142, 142, 255], [140, 140, 255], [138, 138, 255], [136, 136, 255], [134, 134, 255], [132, 132, 255], [130, 130, 255], [128, 128, 255], [126, 126, 255], [124, 124, 255], [122, 122, 255], [120, 120, 255], [118, 118, 255], [116, 116, 255], [114, 114, 255], [112, 112, 255], [110, 110, 255], [108, 108, 255], [106, 106, 255], [104, 104, 255], [102, 102, 255], [100, 100, 255], [98, 98, 255], [96, 96, 255], [94, 94, 255], [92, 92, 255], [90, 90, 255], [88, 88, 255], [86, 86, 255], [84, 84, 255], [82, 82, 255], [80, 80, 255], [78, 78, 255], [76, 76, 255], [74, 74, 255], [72, 72, 255], [70, 70, 255], [68, 68, 255], [66, 66, 255], [64, 64, 255], [62, 62, 255], [60, 60, 255], [58, 58, 255], [56, 56, 255], [54, 54, 255], [52, 52, 255], [50, 50, 255], [48, 48, 255], [46, 46, 255], [44, 44, 255], [42, 42, 255], [40, 40, 255], [38, 38, 255], [36, 36, 255], [34, 34, 255], [32, 32, 255], [30, 30, 255], [28, 28, 255], [26, 26, 255], [24, 24, 255], [22, 22, 255], [20, 20, 255], [18, 18, 255], [16, 16, 255], [14, 14, 255], [12, 12, 255], [10, 10, 255], [8, 8, 255], [6, 6, 255], [4, 4, 255], [2, 2, 255], [0, 0, 255], [0, 0, 254], [0, 0, 253], [0, 0, 252], [0, 0, 251], [0, 0, 250], [0, 0, 249], [0, 0, 248], [0, 0, 247], [0, 0, 246], [0, 0, 245], [0, 0, 244], [0, 0, 243], [0, 0, 242], [0, 0, 241], [0, 0, 240], [0, 0, 239], [0, 0, 238], [0, 0, 237], [0, 0, 236], [0, 0, 235], [0, 0, 234], [0, 0, 233], [0, 0, 232], [0, 0, 231], [0, 0, 230], [0, 0, 229], [0, 0, 228], [0, 0, 227], [0, 0, 226], [0, 0, 225], [0, 0, 224], [0, 0, 223], [0, 0, 222], [0, 0, 221], [0, 0, 220], [0, 0, 219], [0, 0, 218], [0, 0, 217], [0, 0, 216], [0, 0, 215], [0, 0, 214], [0, 0, 213], [0, 0, 212], [0, 0, 211], [0, 0, 210], [0, 0, 209], [0, 0, 208], [0, 0, 207], [0, 0, 206], [0, 0, 205], [0, 0, 204], [0, 0, 203], [0, 0, 202], [0, 0, 201], [0, 0, 200], [0, 0, 199], [0, 0, 198], [0, 0, 197], [0, 0, 196], [0, 0, 195], [0, 0, 194], [0, 0, 193], [0, 0, 192], [0, 0, 191], [0, 0, 190], [0, 0, 189], [0, 0, 188], [0, 0, 187], [0, 0, 186], [0, 0, 185], [0, 0, 184], [0, 0, 183], [0, 0, 182], [0, 0, 181], [0, 0, 180], [0, 0, 179], [0, 0, 178], [0, 0, 177], [0, 0, 176], [0, 0, 175], [0, 0, 174], [0, 0, 173], [0, 0, 172], [0, 0, 171], [0, 0, 170], [0, 0, 169], [0, 0, 168], [0, 0, 167], [0, 0, 166], [0, 0, 165], [0, 0, 164], [0, 0, 163], [0, 0, 162], [0, 0, 161], [0, 0, 160], [0, 0, 159], [0, 0, 158], [0, 0, 157], [0, 0, 156], [0, 0, 155], [0, 0, 154], [0, 0, 153], [0, 0, 152], [0, 0, 151], [0, 0, 150], [0, 0, 149], [0, 0, 148], [0, 0, 147], [0, 0, 146], [0, 0, 145], [0, 0, 144], [0, 0, 143], [0, 0, 142], [0, 0, 141], [0, 0, 140], [0, 0, 139], [0, 0, 138], [0, 0, 137], [0, 0, 136], [0, 0, 135], [0, 0, 134], [0, 0, 133], [0, 0, 132], [0, 0, 131], [0, 0, 130], [0, 0, 129], [0, 0, 128], [0, 0, 128]],
    ),      


